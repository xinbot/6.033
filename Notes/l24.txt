6.033: Security - Underground Web Technologies
Lecture 24
Katrina LaCurts, lacurts@mit.edu

**********************************************************************
* Disclaimer: This is part of the security section in 6.033. Only    *
* use the information you learn in this portion of the class to      *
* secure your own systems, not to attack others.                     *
**********************************************************************

0. Introduction
   - We've covered how to provide confidentiality, integrity, and
     authenticity
   - Today we're talking about anonymity
   - Focus: Tor and Bitcoin
     - Tor: network for users to remain anonymous
     - Bitcoin: digitial currency system, which (possibly) provides
       anonymity
     - Both deal with interesting technical problems
     - Both solve problems using things we've taught you (public keys,
       signatures, etc.)
     - Very popular as of late
   - You'll see some threat models we haven't considered yet

1. Crypto review
   - Two ways to encrypt data
     - Symmetric-key cryptography
       - Alice and Bob share a key k, use it to encrypt and decrypt.
	     k is secret, known only to Alice and Bob
       - Key-exchange is an issue, we typically use Diffie-Hellman key
	     exchange (L22)
       - Generally very fast
     - Public-key cryptography
       - Alice and Bob each have their own key pair: (secret key,
	     public key)
       - Alice's secret key is known ONLY to her; Bob's secret key is
	     known ONLY to him.  Public keys are known to everyone
       - To encrypt a message to Alice, Bob uses her public key.  She
	     decrypts it with her secret key
       - Aside: you saw public/secret keys used for signatures, where
	     signing was done with the *secret* key and verification with
	     the public one
         - Mathematically, signature keys have to be constructed
	       different than encryption keys, but that's out of scope
       - Everyone can do an action using the public key, but only the
     owner of the corresponding secret key can do the reverse
		 action
     - In practice: use public-key cryptography to exchange an initial
	   secret, which is used to generate a symmetric key, which is
	   used to encrypt the rest of the conversation
       - Happens in TLS

2. Tor
   - Goal: hide some information from a network adversary
   - Secure channel model: encrypt data, so packets look like:

       Alice ---- [to:bob|from:alice|XXXXXXXXX ] ---> Bob
   - Adversaries still know that Alice and Bob are communicating, even
     in this data (bc we can't encrypt packet headers).  Concerning
     if, e.g., Alice is communicating with a sensitive website
   - Tor will provide anonymity for Alice: Only she will know that
     she's communicating with a particular server.  The server won't
     even know that Alice is talking to it
   - Starting idea: proxy server
     - Alice sends data to proxy server.  Header shows
       "To:Proxy|From:Alice"
     - Proxy receives packet, rewrites header, sends packet to server
       - Header: "To:Server|From:Proxy"
       - Traffic back from server goes to proxy, who sends it back to
         Alice (proxy keeps some state to do this)
     - Adversary between Alice and proxy only knows that Alice
       communicated with proxy; Adversary on network between proxy and
       server only knows that proxy communicated with server
     - Problem: Proxy knows that Alice is communicating with server
   - Better idea: A network of N proxies
     - Alice chooses three (or more) proxies.  Say P1, P2, P3
     - Traffic to server, S, goes

         A --> P1 --> P2 --> P3 --> S

     - Nodes on this path -- "circuit", in Tor parlance -- set up the
       following state.  Here, the "circuit ID" is 5.

        A -- P1 --- P2 ---- P3 --- S
        5:P1 5:A,P2 5:P1,P3 5:P2,S

     - State at each node only gives previous and next hop.  Allows
       nodes to send traffic in forward and reverse directions
     - Each node in circuit makes changes to packet header
         A --- [from:A|to:P1|cir:5|XXX] ---> 
         P1 -- [from:P1|to:P2|cir:5|XXX] -->
         P2 -- [from:P2|to:P3|cir:5|XXX] -->
         P3 -- [from:P3|to:S|XXX] ---------> S
     - Problem: Adversary that can observe network between A and P1
       and between P3 and S will see the same packet data (even if
       it's encrypted, it didn't change), and know that A is talking
       to S.
   - Tor: Network of proxies + encryption
     - Each proxy gets its own keypair
     - Alice encrypts here data with all three keypairs

       PK_A(circuit:K|PK_B(circuit:K|PK_C(circuit:K|XXX)))

     - Each proxy strips off a layer of encryption

       A -- [to:P1|from:A|PK_P1(circuit:K|PK_P2(circuit:K|PK_P3(circuit:K|XXX)))] -->
       P1 -- [to:P2|from:P1|PK_P2(circuit:K|PK_P3(circuit:K|XXX))] -->
       P2 -- [to:P3|from:P2|PK_P3(circuit:K|XXX)] ------------------->
       P3 -- [to:S|from:P3|XXX] -------------------------------------> S
     - Layers are stripped off like onions.  Tor = The Onion Router
       - Tor's encryption method is a bit different, but this is the
         basic idea
   - Tor isn't perfect
     - Adversaries can use traffic statistics to correlate a user's
       traffic across the network
       - Techniques exist to mitigate this: shaping traffic, mixing
         traffic
     - Overhead (particularly as it affects latency) can be high
   - Problems not covered in 6.033
     - How does Alice discover the onion routers?
     - How does she select a circuit?
     - Does she use a separate circuit per TCP connect?  Per server?

3. Currency
   - What is money?
     - A medium for exchange.  It's not valuable for itself, but for
	   future exchanges
     - A store of value.
   - Good things about physical money
     - Portable
     - Semi-anonymous (modulo, e.g., tracking serial numbers)
     - Can't double-spend: I can't spend the same bill in two places,
	   since once I spend the bill it's gone from my possession
     - Can't "repudiate" after payment: Once I pay someone with bills,
	   I can't lie and say "Oh no I didn't really pay that person"
     - No need for trusted third-party to make a transaction.  You
	   just hand the bill to the other person
     - Government can print more as the economy expands or conditions
	   dictate
   - Neutral thing about physical money
     - Difficult to tax/monitor transactions (good or bad depending on
	   your goals)
   - Bad things about physical money
     - Easy to steal
     - Doesn't work online
   - Good things about electronic money (credit cards, paypal)
     - Works online
     - Harder to steal (sometimes)
   - Bad things about electronic money
     - No privacy

4. A Decentralized Digital Currency (Almost)
   - Goal for right now: try to build a digital currency that doesn't
     require a trusted third party (a bank)
   - Need to address
     - Forgery (can't generate money you don't have)
     - Double-spending (can't spend the same money twice)
     - Theft
   - Idea 1
     - Every time Alice wants to give Bob a coin, she simply sends
	   him a message that says "I, Alice, am giving Bob one coin."
     - Problem: Forgery!  Anyone could forge that message.
   - Idea 2:
     - Sign those messages.  Prevents forgery
     - Problem: Duplicates.  If Alice sends ten messages like the one
	   above, did she give Bob ten coins?  Were some retransmission?
   - Idea 3:
     - Add sequence numbers.  It's money, so let's call those "serial
	   numbers" instead.
   - Still to solve
     - Keeping track of who owns which coins
     - Assigning new serial numbers
     - Verifying that a particular coin hasn't already been spent
   - Those unsolved problems are the things banks normally deal with

5. Dealing with Double-spending
   - Problem: Alice tries to send the same coin to Bob and Charlie,
     i.e., to spend the coin twice.
   - Idea: Publish all transactions in some sort of public log.
     Instead of having a centralized bank keep track of all
	 transactions, we'll let *everybody* keep track of all
	 transactions.
     - Need a way to secure the log, and to make sure everyone has the
	   correct version of the log
   - Sketch of this idea
     - If Alice sends a coin to Bob, he publishes that transaction and
	   alerts everyone
     - If Alice later tries to send the same coin to Charlie, all
	   parties in the network will know that something is amiss:
	   they'll see that Alice already sent that coin to Bob
   - Problem: What if Alice sent the coin to Bob and Charlie at the
     time, effectively spending it with both parties before either has
	 had a chance to publish the transaction.
   - Bitcoin solves this problem with a notion of consensus: gets
     agreement from "enough people" as to which transaction is valid
	 (either the one with Bob or the one with Charlie).
   - Instead of "enough people", let's say, specifically, "more than
     50% of the network".  There are at least two problems with this:
     1. We might not know how many people are in the network.
     2. Even if we know how many people are in the network, Alice could
        create multiple identities herself.  This is known as a Sybil
		Attack: a user subverts a system by creating multiple
		identities
   - How do we solve these remaining problems?  See tomorrow's
     recitation!
   - Why doesn't Bitcoint tie users to strong identities (e.g., social
     security numbers) to prevent double-spending?  Bitcoin wants
	 users to remain anonymous
     - Do they?  You can debate

6. Problems you will solve in recitation:
   - How does Bitcoin prevent someone else from spending my money?
   - What are serial numbers in Bitcoin?
   - What is the analogue of a bank in Bitcoin?
   - How does Bitcoin prevent double-spending, and in particular,
     thwart Sybil attacks?
   - How does Bitcoin provide an ordering on transactions?
     - We didn't bring this up in lecture

7. Summary
   - Technical problems you saw today
     - How to design a network where no one, except the sender, keeps
	   state linking sender and receiver, and yet a packet can be sent
	   from A to S
     - How to create a decentralized digital currency, and in
	   particular, how to create a secure distributed public log.
   - These two technologies can get a bad rap, because they are often
     used on the "underground web".  Unfair!  They solve cool problems 
     in networking/distributed systems.
   - Moreover, they give you a sense of how secure you are online.
     Did you know, e.g., that even if you encrypt your packets,
	 adversaries can get all sorts of meta-information?  Perhaps we
	 live in a world where our government collects that information?
	 Do we want them to know who we're talking to regardless of
	 whether we're doing something illegal?
