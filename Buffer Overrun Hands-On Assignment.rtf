{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Question 1:
\b0  What system call(s) does 
\f1\fs26 shellcode.S
\f0\fs32  invoke to remove the 
\f1\fs26 grades.txt
\f0\fs32  file?\
	The call to unlink and the call to exit status\
\

\b Question 2:
\b0  Explain the malicious URL you wrote down earlier. The URL consists of three parts: the first part starts with 
\f1\fs26 %EB%1B%5E%89
\f0\fs32  and ends with 
\f1\fs26 grades.txt
\f0\fs32 ; the second part is a list of "x"s, after which you should see the third part in the form 
\f1\fs26 %XX%YY%ZZ%WW
\f0\fs32 . Where does each part come from?\
	The first part contains shell code for removing grades.txt file. The \'93x\'94s are used to pad spaces until it reach a line after the return address. The third part is the beginning address of the shell code.\
\

\b Question 3:
\b0  Save a copy of your 
\f1\fs26 exploit-ex.py
\f0\fs32 . If 
\f1\fs26 http-nx
\f0\fs32  prints different values of 
\f1\fs26 reqpath
\f0\fs32  and 
\f1\fs26 ebp
\f0\fs32 , update 
\f1\fs26 exploit-ex.py
\f0\fs32  with the new values. Run 
\f1\fs26 exploit-ex.py
\f0\fs32  in the 
\i bottom
\i0  window. Is your exploit script able to remove 
\f1\fs26 grades.txt
\f0\fs32  this time? Why or why not?\
	No, the script doesn\'92t work this time. Because the httpd-nx prevents code execution within the stack. \
\

\b Question 4:
\b0  Ben runs 
\f1\fs26 exploit-nx.py
\f0\fs32  you wrote to trick 
\f1\fs26 httpd-nx
\f0\fs32  into removing 
\f1\fs26 grades.txt
\f0\fs32 . When executing the function 
\f1\fs26 process_client
\f0\fs32  (
\f1\fs26 httpd.c:158
\f0\fs32 ) in 
\f1\fs26 httpd-nx
\f0\fs32 , the stack is shown as the following diagram. What are the values at the return address and P after a successful exploit? Hint: you can find these values in 
\f1\fs26 exploit-nx.py
\f0\fs32 .\

\f1\fs26                      +------------------+\
                     |       ...        |\
                     +------------------+\
                     |     fname[9]     |\
                     |       ...        |\
                     |     fname[0]     |\
                     +------------------+\
                     |        P         | (4 bytes)\
                     +------------------+\
        beef ------> |    0xdeadbeef    | (4 bytes)\
                     +------------------+\
                     |  return address  | (4 bytes)\
                     +------------------+\
         ebp ------> |    saved %ebp    | (4 bytes)\
                     +------------------+\
                     |       ...        |\
                     +------------------+\
                     |   reqpath[255]   |\
                     |       ...        |\
     reqpath ------> |    reqpath[0]    |\
                     +------------------+\
	
\f0\fs32 The value at the return address is the location of unlink function. The value of P is the memory location of the filename.
\f1\fs26 \
\

\f0\b\fs32 Question 5:
\b0  Do the values of 
\f1\fs26 reqpath
\f0\fs32  and 
\f1\fs26 ebp
\f0\fs32  change in the top window after restarting the web server? Does the difference \'93
\f1\fs26 ebp
\f0\fs32  - 
\f1\fs26 reqpath
\f0\fs32 \'94 change? If you observe any changes, do you think these changes make your exploit harder to succeed or not? Why?\
	The values of reqpath and ebp change in the top window after restarting the server. The difference \'93ebb -reqpath\'94 change and these changes make exploit harder to succeed. Because the location of these two addresses is randomised \
\

\b Question 6:
\b0  Fill in the 
\f1\fs26 MAGIC-PATH
\f0\fs32  part and complete the URL for retrieving the server's 
\f1\fs26 /etc/passwd
\f0\fs32  using 
\f1\fs26 curl
\f0\fs32 . Can you use the same URL in your browser to access that file?\
	The MAGIC-PATH I typed was: ../../../../.. . You can\'92t use the same URL in the browser. Because browser prevents you from checking other directories automatically.}